# Only valid for development environment
@test_email = user@example.com
@test_id = 0
@admin_email = admin@example.com
@admin_pass = admin

### Verify admin user existence
GET http://localhost:8000/users/exists/{{ admin_email }}
Content-Type: application/json

> {%
    client.test("AdminExists", function() {
        client.assert(response.status === 200);
        client.assert(response.body["exists"] === true);
        client.assert(response.body["is_superuser"] === true);
    });
 %}

### Check test user existence
GET http://localhost:8000/users/exists/{{ test_email }}
Content-Type: application/json

> {%
    client.global.set("test_id", response.body["id"]);
    client.test("UserExistsFalse", function() {
        client.assert(response.status === 200);
        client.assert(response.body["exists"] !== undefined);
    });
 %}

### Delete user without authentication
DELETE http://localhost:8000/users/{{ test_id }}
Content-Type: application/json

> {%
    client.test("UserDeleteUnauthorized", function() {
        client.assert(response.status === 401);
    });
 %}

### Login as superuser
POST http://localhost:8000/auth/jwt/login
Content-Type: application/x-www-form-urlencoded

username={{ admin_email }}&password={{ admin_pass }}

> {%
    client.global.set("access_token", response.body["access_token"]);
    client.test("Admin Login", function() {
        client.assert(response.status === 200 && response.body["access_token"]);
        client.assert(response.body["token_type"] === "bearer");
    });
 %}

### Delete test user
DELETE http://localhost:8000/users/{{ test_id }}
Content-Type: application/json
Authorization: Bearer {{ access_token }}

> {%
    client.test("UserDelete", function() {
        client.assert(response.status === 204);
    });
 %}

### Create user "test"
POST http://localhost:8000/auth/register
Content-Type: application/json

{
    "email": "{{ test_email }}",
    "password": "password"
}

> {%
    client.global.set("test_id", response.body["id"]);
    client.test("UserCreate", function() {
        client.assert(response.status === 201);
    });
 %}

### Create user with conflicting email
POST http://localhost:8000/auth/register
Content-Type: application/json

{
    "email": "{{ test_email }}",
    "password": "password"
}

> {%
    client.test("UserCreateConflict", function() {
        client.assert(response.status === 400);
    });
 %}
